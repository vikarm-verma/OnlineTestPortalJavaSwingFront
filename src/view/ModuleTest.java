/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import com.github.sarxos.webcam.Webcam;
import com.github.sarxos.webcam.WebcamPanel;
import com.github.sarxos.webcam.WebcamResolution;
import com.xuggle.mediatool.IMediaWriter;
import com.xuggle.mediatool.ToolFactory;
import com.xuggle.xuggler.ICodec;
import com.xuggle.xuggler.IPixelFormat;
import com.xuggle.xuggler.IVideoPicture;
import com.xuggle.xuggler.video.ConverterFactory;
import com.xuggle.xuggler.video.IConverter;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.image.BufferedImage;
import java.io.File;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.ListIterator;
import java.util.Map;
import java.util.TimeZone;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.persistence.TypedQuery;
import javax.swing.BorderFactory;
import javax.swing.ButtonGroup;
import javax.swing.ButtonModel;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JRootPane;
import javax.swing.Popup;
import javax.swing.PopupFactory;
import javax.swing.Timer;
import javax.swing.border.Border;
import onlineassessment.entity.Module1questions;
import onlineassessment.entity.Module1questions;
import onlineassessment.entity.Moduletestresult;
import onlineassessment.entity.Practicetestresult;
import onlineassessment.entity.Schedulemt;
import onlineassessment.entity.Studentmt;
import onlineassessment.entity.Studentvideo;
import onlineassessment.util.HibernateUtil;
import org.hibernate.HibernateException;
import org.hibernate.Query;
import org.hibernate.Session;

/**
 *
 * @author Vikram
 */
public class ModuleTest extends javax.swing.JFrame {

    /**
     *
     * Creates new form ModuleTest
     */
    private static String get10RandomQuestions = "from q module1questions q order by rand() limit 10";
    Map<Integer, Module1questions> map = new HashMap<>();
    Map<Integer, Integer> answerMap = new HashMap<>();
    ButtonGroup buttonGroup = new ButtonGroup();
    String sno;
    Timer time;
    int k = 0;
    private long startTime = -1;
    private long duration = 5000;
    //private static ModuleTest frame = new ModuleTest();
    boolean isRunning = false;
    Webcam webcam;

    public ModuleTest() {
        System.out.println("test constructor called");
        int val = 0;
        initComponents();
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        this.setSize(screenSize.width, screenSize.height);
        executeHQLQuery(get10RandomQuestions);
        currentQuestion();

        buttonGroup.add(jRadioButton1);
        buttonGroup.add(jRadioButton2);
        buttonGroup.add(jRadioButton3);
        buttonGroup.add(jRadioButton4);

        for (int i = 1; i <= 10; i++) {
            answerMap.put(i, val);
        }

        testTimer();
    }

    class VideoFeedTaker extends Thread {

        @Override
        public void run() {
            while (true && isRunning) {
      //          System.out.println("in video feed taker run method ");
                Image image = webcam.getImage();
                lbCamHolder.setIcon(new ImageIcon(image));
                try {
                    Thread.sleep(50);
                } catch (InterruptedException ex) {
                }
            }
        }
    }

    private Webcam openWebcam(Dimension size) {
        System.out.println("in open webcam method");
        webcam = Webcam.getDefault();
        if (webcam.isOpen()) {
            System.out.println("webcam is open ");
            webcam.close();
        }

        if (!webcam.isOpen()) {
            System.out.println("webcam is close ");
            webcam.setViewSize(size);
            webcam.open();
        }
        if (!isRunning) {
            isRunning = true;
            new VideoFeedTaker().start();
        } else {
            isRunning = false;
            webcam.close();
        }
        VideoFeedTaker fd = new VideoFeedTaker();
        fd.start();
        return webcam;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabel3 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        lbCamHolder = new javax.swing.JLabel();
        jRadioButton1 = new javax.swing.JRadioButton();
        jRadioButton2 = new javax.swing.JRadioButton();
        jRadioButton3 = new javax.swing.JRadioButton();
        jRadioButton4 = new javax.swing.JRadioButton();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        btnEndText = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Module Test");
        setAlwaysOnTop(true);
        setBackground(new java.awt.Color(255, 255, 255));
        setFont(new java.awt.Font("Arial Unicode MS", 1, 18)); // NOI18N
        setForeground(new java.awt.Color(255, 255, 255));
        setPreferredSize(new java.awt.Dimension(1039, 768));
        setResizable(false);

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel2.setForeground(new java.awt.Color(255, 255, 255));
        jPanel2.setAutoscrolls(true);
        jPanel2.setPreferredSize(new java.awt.Dimension(1039, 768));

        jTextArea1.setColumns(20);
        jTextArea1.setLineWrap(true);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jLabel3.setBackground(new java.awt.Color(255, 255, 255));
        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 0, 0));

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setText("jLabel2");

        jRadioButton1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jRadioButton1.setText("jRadioButton1");
        jRadioButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton1ActionPerformed(evt);
            }
        });

        jRadioButton2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jRadioButton2.setText("jRadioButton2");
        jRadioButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton2ActionPerformed(evt);
            }
        });

        jRadioButton3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jRadioButton3.setText("jRadioButton3");
        jRadioButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton3ActionPerformed(evt);
            }
        });

        jRadioButton4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jRadioButton4.setText("jRadioButton4");
        jRadioButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton4ActionPerformed(evt);
            }
        });

        jButton1.setBackground(new java.awt.Color(51, 51, 255));
        jButton1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButton1.setForeground(new java.awt.Color(255, 255, 255));
        jButton1.setText("PREV");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setBackground(new java.awt.Color(0, 51, 255));
        jButton2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButton2.setForeground(new java.awt.Color(255, 255, 255));
        jButton2.setText("NEXT");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        btnEndText.setBackground(new java.awt.Color(255, 0, 0));
        btnEndText.setForeground(new java.awt.Color(255, 255, 255));
        btnEndText.setText("End Test");
        btnEndText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEndTextActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(100, 100, 100)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jRadioButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jRadioButton2)
                    .addComponent(jRadioButton3)
                    .addComponent(jRadioButton4))
                .addGap(822, 822, 822))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jLabel2)
                .addGap(20, 20, 20)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(jPanel2Layout.createSequentialGroup()
                            .addGap(20, 20, 20)
                            .addComponent(jButton1)
                            .addGap(25, 25, 25)
                            .addComponent(jButton2)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnEndText, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 540, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lbCamHolder, javax.swing.GroupLayout.PREFERRED_SIZE, 318, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(58, 58, 58))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(40, 40, 40)
                        .addComponent(jLabel2))
                    .addComponent(lbCamHolder, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jRadioButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(25, 25, 25)
                .addComponent(jRadioButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(25, 25, 25)
                .addComponent(jRadioButton3, javax.swing.GroupLayout.DEFAULT_SIZE, 32, Short.MAX_VALUE)
                .addGap(25, 25, 25)
                .addComponent(jRadioButton4, javax.swing.GroupLayout.DEFAULT_SIZE, 31, Short.MAX_VALUE)
                .addGap(55, 55, 55)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnEndText, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(35, 35, 35))
        );

        jRadioButton1.getAccessibleContext().setAccessibleName("rdbOption1");
        jRadioButton2.getAccessibleContext().setAccessibleName("rdbOption2");
        jRadioButton3.getAccessibleContext().setAccessibleName("rdbOption3");
        jRadioButton4.getAccessibleContext().setAccessibleName("rdbOption4");
        jButton1.getAccessibleContext().setAccessibleName("btnPrev");
        jButton2.getAccessibleContext().setAccessibleName("btnNext");

        jScrollPane2.setViewportView(jPanel2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 1072, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 760, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        getAccessibleContext().setAccessibleParent(this);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnEndTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEndTextActionPerformed
        int a = JOptionPane.showConfirmDialog(ModuleTest.this, "Are you sure you want to end the test ?");
        if (a == JOptionPane.YES_OPTION) {
            endTest();

        }        // TODO add your handling code here:
    }//GEN-LAST:event_btnEndTextActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        nextQuestion();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        prevQuestion();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jRadioButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton4ActionPerformed
        //    TODO add your handling code here:
        answerMap.put(qNo, 4);
        System.out.println(qNo + "radio button 4 value is" + answerMap.get(qNo));
    }//GEN-LAST:event_jRadioButton4ActionPerformed

    private void jRadioButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton3ActionPerformed
        // TODO add your handling code here:
        answerMap.put(qNo, 3);
    }//GEN-LAST:event_jRadioButton3ActionPerformed

    private void jRadioButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton2ActionPerformed
        // TODO add your handling code here:
        answerMap.put(qNo, 2);
    }//GEN-LAST:event_jRadioButton2ActionPerformed

    private void jRadioButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton1ActionPerformed
        // TODO add your handling code here:
        answerMap.put(qNo, 1);
    }//GEN-LAST:event_jRadioButton1ActionPerformed
    int sec = 200;
    IMediaWriter writer;
File saveFile;
    public void testTimer() {
        try {
      //      System.out.println("in test timer method");
            saveFile = new File("E:\\STS-workspace\\workspace-spring-tool-suite-4-4.9.0.RELEASE\\OnlineAssessment\\src\\main\\resources\\static\\videos"+StudentForm.userId + ".mp4");
            writer = ToolFactory.makeWriter(saveFile.getName());
            Dimension size = WebcamResolution.QQVGA.getSize();
            writer.addVideoStream(0, 0, ICodec.ID.CODEC_ID_H264, size.width, size.height);
            long start = System.currentTimeMillis();
            webcam = openWebcam(size);
            // System.out.println("no webcam is there");
            Border border = BorderFactory.createLineBorder(Color.WHITE);
            jLabel3.setFont(new Font("Calibri", Font.BOLD, 25));
            jLabel3.setBorder(border);
            time = new Timer(1000, new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    Date d = new Date(sec * 1000L);
                    SimpleDateFormat df = new SimpleDateFormat("mm:ss"); // HH for 0-23
                    df.setTimeZone(TimeZone.getTimeZone("GMT"));
                    String time = df.format(d);
                    if (sec >= 0) {
                        jLabel3.setText(" " + time);
                    }
                    if (sec == 300) {
                        JOptionPane.showMessageDialog(ModuleTest.this, "YOU HAVE ONLY FIVE MINUTES LEFT");
                    }
                    if (sec < 10) {
                        jLabel3.setFont(new Font("Calibri", Font.BOLD, 30));
                        jLabel3.setBackground(Color.red);
                        jLabel3.setText("YOUR TEST IS GOING TO END IN " + time);
                        if (sec == 0) {
                            endTest();
                        }
                    }
                    BufferedImage image = ConverterFactory.convertToType(webcam.getImage(), BufferedImage.TYPE_3BYTE_BGR);
                    IConverter converter = ConverterFactory.createConverter(image, IPixelFormat.Type.YUV420P);
                    IVideoPicture frame = converter.toPicture(image, (System.currentTimeMillis() - start) * 1000);
                    frame.setKeyFrame(sec == 900);
                    frame.setQuality(100);
                    writer.encodeVideo(0, frame);
                    try {
                        Thread.sleep(20);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(ModuleTest.class.getName()).log(Level.SEVERE, null, ex);
                    }
        //            System.out.println("frame is " + sec);
                    sec = sec - 1;
                }
            });
            time.start();
        } catch (Exception e) {
            System.out.println("Webcam is not there " + e);
        }
    }
    int correct, incorrect, percentage;

    private void executeHQLQuery(String hql) {
        try {
            Session session = HibernateUtil.getSessionFactory().openSession();
            session.beginTransaction();
            Query q = session.createQuery("SELECT e FROM Module1questions e ORDER BY RAND()");
            q.setMaxResults(10);
            List<Module1questions> resultList = q.list();
            if (resultList.isEmpty()) {
                System.out.println("no question is in table");
                JOptionPane.showMessageDialog(ModuleTest.this, "No question is in database");
                System.exit(0);
            }
            displayResult(resultList);
            session.getTransaction().commit();
        } catch (HibernateException he) {
            he.printStackTrace();
        }
    }
    int qNo = 0;

    private void displayResult(List resultList) {
        ArrayList<Module1questions> al = new ArrayList<>();
        al.addAll(resultList);
        System.out.println(al);
        Iterator<Module1questions> li = al.iterator();
        while (li.hasNext()) {
            qNo = qNo + 1;
            Module1questions qt = li.next();
            System.out.println(qt.getQuestion() + " " + qt.getAnswer());
            map.put(qNo, qt);
        }
        qNo = 0;
    }

    public void currentQuestion() {
        buttonGroup.clearSelection();
        qNo = qNo + 1;
        if (answerMap.size() != 0) {
            if (answerMap.containsKey(qNo)) {
                if (1 == answerMap.get(qNo)) {
                    jRadioButton1.doClick();
                }
                if (2 == answerMap.get(qNo)) {
                    jRadioButton2.doClick();
                }
                if (3 == answerMap.get(qNo)) {
                    jRadioButton3.doClick();
                }
                if (4 == answerMap.get(qNo)) {
                    jRadioButton4.doClick();
                }
            }
        }
        System.out.println("q no in current is " + qNo);
        jTextArea1.setText(map.get(qNo).getQuestion());
        sno = String.valueOf(qNo);
        jLabel2.setText(sno);
        jRadioButton1.setText("<html>" + map.get(qNo).getOpt1() + "</html>");
        jRadioButton2.setText("<html>" + map.get(qNo).getOpt2() + "</html>");
        jRadioButton3.setText("<html>" + map.get(qNo).getOpt3() + "</html>");
        jRadioButton4.setText("<html>" + map.get(qNo).getOpt4() + "</html>");
        jButton1.setEnabled(false);
    }

    public void prevQuestion() {
        buttonGroup.clearSelection();
        qNo = qNo - 1;
        sno = String.valueOf(qNo);
        jLabel2.setText(sno);
        System.out.println("q no in prev is " + qNo);
        if (qNo <= 1) {
            if (answerMap.size() != 0) {
                if (answerMap.containsKey(qNo)) {
                    if (1 == answerMap.get(qNo)) {
                        jRadioButton1.doClick();
                    }
                    if (2 == answerMap.get(qNo)) {
                        jRadioButton2.doClick();
                    }
                    if (3 == answerMap.get(qNo)) {
                        jRadioButton3.doClick();
                    }
                    if (4 == answerMap.get(qNo)) {
                        jRadioButton4.doClick();
                    }
                }
            }
            jTextArea1.setText(map.get(qNo).getQuestion());
            jRadioButton1.setText("<html>" + map.get(qNo).getOpt1() + "</html>");
            jRadioButton2.setText("<html>" + map.get(qNo).getOpt2() + "</html>");
            jRadioButton3.setText("<html>" + map.get(qNo).getOpt3() + "</html>");
            jRadioButton4.setText("<html>" + map.get(qNo).getOpt4() + "</html>");
            jButton1.setEnabled(false);
            return;
        } else {
            //    System.out.println("this is prev questions");
            if (answerMap.size() != 0) {
                if (answerMap.containsKey(qNo)) {
                    if (1 == answerMap.get(qNo)) {
                        jRadioButton1.doClick();
                    }
                    if (2 == answerMap.get(qNo)) {
                        jRadioButton2.doClick();
                    }
                    if (3 == answerMap.get(qNo)) {
                        jRadioButton3.doClick();
                    }
                    if (4 == answerMap.get(qNo)) {
                        jRadioButton4.doClick();
                    }
                }
            }
            jTextArea1.setText(map.get(qNo).getQuestion());
            jRadioButton1.setText("<html>" + map.get(qNo).getOpt1() + "</html>");
            jRadioButton2.setText("<html>" + map.get(qNo).getOpt2() + "</html>");
            jRadioButton3.setText("<html>" + map.get(qNo).getOpt3() + "</html>");
            jRadioButton4.setText("<html>" + map.get(qNo).getOpt4() + "</html>");
            jButton1.setEnabled(true);
            jButton2.setEnabled(true);
        }
    }

    public void nextQuestion() {
        buttonGroup.clearSelection();
        qNo = qNo + 1;
        sno = String.valueOf(qNo);
        jLabel2.setText(sno);
        System.out.println("q no in next is " + qNo);
        if (qNo == 10) {
            System.out.println("in else of qNo" + qNo);
            jButton2.setEnabled(false);
            if (answerMap.size() != 0) {
                if (answerMap.containsKey(qNo)) {
                    if (1 == answerMap.get(qNo)) {
                        jRadioButton1.doClick();
                    }
                    if (2 == answerMap.get(qNo)) {
                        jRadioButton2.doClick();
                    }
                    if (3 == answerMap.get(qNo)) {
                        jRadioButton3.doClick();
                    }
                    if (4 == answerMap.get(qNo)) {
                        jRadioButton4.doClick();
                    }
                }
            }
            jTextArea1.setText(map.get(qNo).getQuestion());
            jRadioButton1.setText("<html>" + map.get(qNo).getOpt1() + "</html>");
            jRadioButton2.setText("<html>" + map.get(qNo).getOpt2() + "</html>");
            jRadioButton3.setText("<html>" + map.get(qNo).getOpt3() + "</html>");
            jRadioButton4.setText("<html>" + map.get(qNo).getOpt4() + "</html>");
            return;
        } else if (qNo < 10) {
            jTextArea1.setText(map.get(qNo).getQuestion());
            jRadioButton1.setText("<html>" + map.get(qNo).getOpt1() + "</html>");
            jRadioButton2.setText("<html>" + map.get(qNo).getOpt2() + "</html>");
            jRadioButton3.setText("<html>" + map.get(qNo).getOpt3() + "</html>");
            jRadioButton4.setText("<html>" + map.get(qNo).getOpt4() + "</html>");
            if (answerMap.size() != 0) {
                if (answerMap.containsKey(qNo)) {
                    if (1 == answerMap.get(qNo)) {
                        jRadioButton1.doClick();
                    }
                    if (2 == answerMap.get(qNo)) {
                        jRadioButton2.doClick();
                    }
                    if (3 == answerMap.get(qNo)) {
                        jRadioButton3.doClick();
                    }
                    if (4 == answerMap.get(qNo)) {
                        jRadioButton4.doClick();
                    }
                }
            }
            jButton2.setEnabled(true);
            jButton1.setEnabled(true);
        }
    }

    public void endTest() {
        try {
            System.out.println(answerMap);
            int a = 1;
            for (Map.Entry<Integer, Module1questions> q : map.entrySet()) {
                int answer = Integer.parseInt(q.getValue().getAnswer());
                if (answer == answerMap.get(a)) {
                    correct++;
                } else {
                    incorrect++;
                }
                percentage = correct * 100 / 10;
                a++;
            }
            System.out.println("correct answer are " + correct + "\n" + "incorrect answers are" + incorrect
                    + "\n" + "percentage is " + percentage);
            try {
                Thread.sleep(1000);
                System.out.println("video recorded in the file");
       //         saveResultInTable();
               // saveVideoLinkInTable();
        //        updateStudentActiveStatus();
//
            } catch (Exception e) {
                System.out.println("issue in session saving " + e);
            }
            isRunning = false;
            writer.close();
            writer.flush();
            System.exit(0);
        } catch (Exception e) {
            System.out.println("problem is there " + e);
        }
    }

    public void saveResultInTable() {
        Session session = HibernateUtil.getSessionFactory().openSession();
        session.beginTransaction();
        Moduletestresult ptr = new Moduletestresult();
        ptr.setCorrectQuestions(correct);
        ptr.setIncorrectQuestions(incorrect);
        ptr.setPercentage(percentage);
        ptr.setModuleTestDate(new Date());
        ptr.setMtkey(StudentForm.userModuleTestID);
        ptr.setStudentId(StudentForm.userId);
        ptr.setTotalQuestions(correct + incorrect);
        ptr.setVideoLink(saveFile.getAbsolutePath());
        session.save(ptr);
        session.getTransaction().commit();
        session.close();

    }
    
    public void saveVideoLinkInTable()
    {
        String filePath=saveFile.getAbsolutePath();
        String fileName=saveFile.getName();
//     //   Studentvideo sv = new Studentvideo("JUMPSID00001",filePath,new Date());     
//        Session session1 = HibernateUtil.getSessionFactory().openSession();
//        session1.beginTransaction();
//        session1.save(sv);
//        session1.getTransaction().commit();
//        session1.close();
        System.out.println("data saved in table , path is "+filePath+" file name is "+fileName);
    }

    public void updateStudentActiveStatus() {
        Session session1 = HibernateUtil.getSessionFactory().openSession();
        Query query1 = session1.createQuery("update Studentmt set mt_active=false where schmtid=:schmtid"
                + " and s_id=:s_id");
        query1.setParameter("schmtid", StudentForm.userModuleTestID);
        query1.setParameter("s_id", StudentForm.userId);
        session1.beginTransaction();
        int result = query1.executeUpdate();
        session1.getTransaction().commit();
        session1.close();
        System.out.println("No of rows updated: " + result);
        JOptionPane.showMessageDialog(this, "TEST CLOSE FOR THE DAY");
        System.out.println("data saved in module test table");
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        System.out.println("it is in main");
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ModuleTest.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ModuleTest.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ModuleTest.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ModuleTest.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
    }

    public WindowAdapter getWindowAdapter() {
        return new WindowAdapter() {
            public void windowClosing(WindowEvent we) {
                super.windowClosing(we);
                JOptionPane.showMessageDialog(ModuleTest.this, "Cant Exit");
            }

            @Override
            public void windowIconified(WindowEvent we) {
                ModuleTest.this.setState(JFrame.NORMAL);
                JOptionPane.showMessageDialog(ModuleTest.this, "Cant Minimize");
            }
        };
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnEndText;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JRadioButton jRadioButton3;
    private javax.swing.JRadioButton jRadioButton4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JLabel lbCamHolder;
    // End of variables declaration//GEN-END:variables
}
